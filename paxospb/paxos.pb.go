// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: paxos.proto

package paxospb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MessageType int32

const (
	LocalTick         MessageType = 0
	PaxosPrepare      MessageType = 1
	PaxosPrepareReply MessageType = 2
	PaxosAccept       MessageType = 3
	PaxosAcceptReply  MessageType = 4
)

var MessageType_name = map[int32]string{
	0: "LocalTick",
	1: "PaxosPrepare",
	2: "PaxosPrepareReply",
	3: "PaxosAccept",
	4: "PaxosAcceptReply",
}

var MessageType_value = map[string]int32{
	"LocalTick":         0,
	"PaxosPrepare":      1,
	"PaxosPrepareReply": 2,
	"PaxosAccept":       3,
	"PaxosAcceptReply":  4,
}

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}

func (x *MessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MessageType_value, data, "MessageType")
	if err != nil {
		return err
	}
	*x = MessageType(value)
	return nil
}

func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fec356ed5fe8331d, []int{0}
}

type EntryType int32

const (
	ApplicationEntry  EntryType = 0
	ConfigChangeEntry EntryType = 1
)

var EntryType_name = map[int32]string{
	0: "ApplicationEntry",
	1: "ConfigChangeEntry",
}

var EntryType_value = map[string]int32{
	"ApplicationEntry":  0,
	"ConfigChangeEntry": 1,
}

func (x EntryType) Enum() *EntryType {
	p := new(EntryType)
	*p = x
	return p
}

func (x EntryType) String() string {
	return proto.EnumName(EntryType_name, int32(x))
}

func (x *EntryType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EntryType_value, data, "EntryType")
	if err != nil {
		return err
	}
	*x = EntryType(value)
	return nil
}

func (EntryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fec356ed5fe8331d, []int{1}
}

type PaxosDataStatus struct {
	Address  string `protobuf:"bytes,1,opt,name=address" json:"address"`
	BinVer   uint32 `protobuf:"varint,2,opt,name=bin_ver,json=binVer" json:"bin_ver"`
	HardHash uint64 `protobuf:"varint,3,opt,name=hard_hash,json=hardHash" json:"hard_hash"`
}

func (m *PaxosDataStatus) Reset()         { *m = PaxosDataStatus{} }
func (m *PaxosDataStatus) String() string { return proto.CompactTextString(m) }
func (*PaxosDataStatus) ProtoMessage()    {}
func (*PaxosDataStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_fec356ed5fe8331d, []int{0}
}
func (m *PaxosDataStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaxosDataStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaxosDataStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaxosDataStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaxosDataStatus.Merge(m, src)
}
func (m *PaxosDataStatus) XXX_Size() int {
	return m.Size()
}
func (m *PaxosDataStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PaxosDataStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PaxosDataStatus proto.InternalMessageInfo

func (m *PaxosDataStatus) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *PaxosDataStatus) GetBinVer() uint32 {
	if m != nil {
		return m.BinVer
	}
	return 0
}

func (m *PaxosDataStatus) GetHardHash() uint64 {
	if m != nil {
		return m.HardHash
	}
	return 0
}

type PaxosMsg struct {
	MsgType             MessageType `protobuf:"varint,1,opt,name=MsgType,json=msgType,enum=paxospb.MessageType" json:"MsgType"`
	To                  uint64      `protobuf:"varint,2,opt,name=To,json=to" json:"To"`
	From                uint64      `protobuf:"varint,3,opt,name=From,json=from" json:"From"`
	GroupId             uint64      `protobuf:"varint,4,opt,name=Group_id,json=groupId" json:"Group_id"`
	InstanceID          uint64      `protobuf:"varint,5,opt,name=InstanceID,json=instanceID" json:"InstanceID"`
	NodeID              uint64      `protobuf:"varint,6,opt,name=NodeID,json=nodeID" json:"NodeID"`
	ProposalID          uint64      `protobuf:"varint,7,opt,name=ProposalID,json=proposalID" json:"ProposalID"`
	ProposalNodeID      uint64      `protobuf:"varint,8,opt,name=ProposalNodeID,json=proposalNodeID" json:"ProposalNodeID"`
	Value               []byte      `protobuf:"bytes,9,opt,name=Value,json=value" json:"Value"`
	PreAcceptID         uint64      `protobuf:"varint,10,opt,name=PreAcceptID,json=preAcceptID" json:"PreAcceptID"`
	PreAcceptNodeID     uint64      `protobuf:"varint,11,opt,name=PreAcceptNodeID,json=preAcceptNodeID" json:"PreAcceptNodeID"`
	RejectByPromiseID   uint64      `protobuf:"varint,12,opt,name=RejectByPromiseID,json=rejectByPromiseID" json:"RejectByPromiseID"`
	NowInstanceID       uint64      `protobuf:"varint,13,opt,name=NowInstanceID,json=nowInstanceID" json:"NowInstanceID"`
	MinChosenInstanceID uint64      `protobuf:"varint,14,opt,name=MinChosenInstanceID,json=minChosenInstanceID" json:"MinChosenInstanceID"`
	Flag                uint32      `protobuf:"varint,17,opt,name=Flag,json=flag" json:"Flag"`
	MasterVariables     []byte      `protobuf:"bytes,19,opt,name=MasterVariables,json=masterVariables" json:"MasterVariables"`
}

func (m *PaxosMsg) Reset()         { *m = PaxosMsg{} }
func (m *PaxosMsg) String() string { return proto.CompactTextString(m) }
func (*PaxosMsg) ProtoMessage()    {}
func (*PaxosMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_fec356ed5fe8331d, []int{1}
}
func (m *PaxosMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaxosMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaxosMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaxosMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaxosMsg.Merge(m, src)
}
func (m *PaxosMsg) XXX_Size() int {
	return m.Size()
}
func (m *PaxosMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_PaxosMsg.DiscardUnknown(m)
}

var xxx_messageInfo_PaxosMsg proto.InternalMessageInfo

func (m *PaxosMsg) GetMsgType() MessageType {
	if m != nil {
		return m.MsgType
	}
	return LocalTick
}

func (m *PaxosMsg) GetTo() uint64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *PaxosMsg) GetFrom() uint64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *PaxosMsg) GetGroupId() uint64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *PaxosMsg) GetInstanceID() uint64 {
	if m != nil {
		return m.InstanceID
	}
	return 0
}

func (m *PaxosMsg) GetNodeID() uint64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *PaxosMsg) GetProposalID() uint64 {
	if m != nil {
		return m.ProposalID
	}
	return 0
}

func (m *PaxosMsg) GetProposalNodeID() uint64 {
	if m != nil {
		return m.ProposalNodeID
	}
	return 0
}

func (m *PaxosMsg) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *PaxosMsg) GetPreAcceptID() uint64 {
	if m != nil {
		return m.PreAcceptID
	}
	return 0
}

func (m *PaxosMsg) GetPreAcceptNodeID() uint64 {
	if m != nil {
		return m.PreAcceptNodeID
	}
	return 0
}

func (m *PaxosMsg) GetRejectByPromiseID() uint64 {
	if m != nil {
		return m.RejectByPromiseID
	}
	return 0
}

func (m *PaxosMsg) GetNowInstanceID() uint64 {
	if m != nil {
		return m.NowInstanceID
	}
	return 0
}

func (m *PaxosMsg) GetMinChosenInstanceID() uint64 {
	if m != nil {
		return m.MinChosenInstanceID
	}
	return 0
}

func (m *PaxosMsg) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *PaxosMsg) GetMasterVariables() []byte {
	if m != nil {
		return m.MasterVariables
	}
	return nil
}

type MessageBatch struct {
	Requests      []PaxosMsg `protobuf:"bytes,1,rep,name=requests" json:"requests"`
	SourceAddress string     `protobuf:"bytes,2,opt,name=source_address,json=sourceAddress" json:"source_address"`
	BinVer        uint32     `protobuf:"varint,3,opt,name=bin_ver,json=binVer" json:"bin_ver"`
}

func (m *MessageBatch) Reset()         { *m = MessageBatch{} }
func (m *MessageBatch) String() string { return proto.CompactTextString(m) }
func (*MessageBatch) ProtoMessage()    {}
func (*MessageBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_fec356ed5fe8331d, []int{2}
}
func (m *MessageBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageBatch.Merge(m, src)
}
func (m *MessageBatch) XXX_Size() int {
	return m.Size()
}
func (m *MessageBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageBatch.DiscardUnknown(m)
}

var xxx_messageInfo_MessageBatch proto.InternalMessageInfo

func (m *MessageBatch) GetRequests() []PaxosMsg {
	if m != nil {
		return m.Requests
	}
	return nil
}

func (m *MessageBatch) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *MessageBatch) GetBinVer() uint32 {
	if m != nil {
		return m.BinVer
	}
	return 0
}

type Entry struct {
	InstanceID uint64    `protobuf:"varint,1,opt,name=InstanceID,json=instanceID" json:"InstanceID"`
	Type       EntryType `protobuf:"varint,2,opt,name=Type,json=type,enum=paxospb.EntryType" json:"Type"`
	Cmd        string    `protobuf:"bytes,3,opt,name=Cmd,json=cmd" json:"Cmd"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_fec356ed5fe8331d, []int{3}
}
func (m *Entry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return m.Size()
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetInstanceID() uint64 {
	if m != nil {
		return m.InstanceID
	}
	return 0
}

func (m *Entry) GetType() EntryType {
	if m != nil {
		return m.Type
	}
	return ApplicationEntry
}

func (m *Entry) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

type EntryBatch struct {
	Entries []Entry `protobuf:"bytes,1,rep,name=entries" json:"entries"`
}

func (m *EntryBatch) Reset()         { *m = EntryBatch{} }
func (m *EntryBatch) String() string { return proto.CompactTextString(m) }
func (*EntryBatch) ProtoMessage()    {}
func (*EntryBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_fec356ed5fe8331d, []int{4}
}
func (m *EntryBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntryBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntryBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntryBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryBatch.Merge(m, src)
}
func (m *EntryBatch) XXX_Size() int {
	return m.Size()
}
func (m *EntryBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryBatch.DiscardUnknown(m)
}

var xxx_messageInfo_EntryBatch proto.InternalMessageInfo

func (m *EntryBatch) GetEntries() []Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type BallotNumber struct {
	ProposalID uint64 `protobuf:"varint,1,opt,name=ProposalID,json=proposalID" json:"ProposalID"`
	NodeID     uint64 `protobuf:"varint,2,opt,name=NodeID,json=nodeID" json:"NodeID"`
}

func (m *BallotNumber) Reset()         { *m = BallotNumber{} }
func (m *BallotNumber) String() string { return proto.CompactTextString(m) }
func (*BallotNumber) ProtoMessage()    {}
func (*BallotNumber) Descriptor() ([]byte, []int) {
	return fileDescriptor_fec356ed5fe8331d, []int{5}
}
func (m *BallotNumber) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BallotNumber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BallotNumber.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BallotNumber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BallotNumber.Merge(m, src)
}
func (m *BallotNumber) XXX_Size() int {
	return m.Size()
}
func (m *BallotNumber) XXX_DiscardUnknown() {
	xxx_messageInfo_BallotNumber.DiscardUnknown(m)
}

var xxx_messageInfo_BallotNumber proto.InternalMessageInfo

func (m *BallotNumber) GetProposalID() uint64 {
	if m != nil {
		return m.ProposalID
	}
	return 0
}

func (m *BallotNumber) GetNodeID() uint64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

type AcceptorState struct {
	InstanceID     uint64       `protobuf:"varint,1,opt,name=InstanceID,json=instanceID" json:"InstanceID"`
	PromiseBallot  BallotNumber `protobuf:"bytes,2,opt,name=PromiseBallot,json=promiseBallot" json:"PromiseBallot"`
	AcceptedBallot BallotNumber `protobuf:"bytes,3,opt,name=AcceptedBallot,json=acceptedBallot" json:"AcceptedBallot"`
	AccetpedValue  string       `protobuf:"bytes,4,opt,name=AccetpedValue,json=accetpedValue" json:"AccetpedValue"`
}

func (m *AcceptorState) Reset()         { *m = AcceptorState{} }
func (m *AcceptorState) String() string { return proto.CompactTextString(m) }
func (*AcceptorState) ProtoMessage()    {}
func (*AcceptorState) Descriptor() ([]byte, []int) {
	return fileDescriptor_fec356ed5fe8331d, []int{6}
}
func (m *AcceptorState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcceptorState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcceptorState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AcceptorState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptorState.Merge(m, src)
}
func (m *AcceptorState) XXX_Size() int {
	return m.Size()
}
func (m *AcceptorState) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptorState.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptorState proto.InternalMessageInfo

func (m *AcceptorState) GetInstanceID() uint64 {
	if m != nil {
		return m.InstanceID
	}
	return 0
}

func (m *AcceptorState) GetPromiseBallot() BallotNumber {
	if m != nil {
		return m.PromiseBallot
	}
	return BallotNumber{}
}

func (m *AcceptorState) GetAcceptedBallot() BallotNumber {
	if m != nil {
		return m.AcceptedBallot
	}
	return BallotNumber{}
}

func (m *AcceptorState) GetAccetpedValue() string {
	if m != nil {
		return m.AccetpedValue
	}
	return ""
}

type MasterVariables struct {
	MasterNodeID uint64 `protobuf:"varint,1,req,name=MasterNodeID,json=masterNodeID" json:"MasterNodeID"`
	Version      uint64 `protobuf:"varint,2,req,name=Version,json=version" json:"Version"`
	LeaseTime    uint32 `protobuf:"varint,3,req,name=LeaseTime,json=leaseTime" json:"LeaseTime"`
}

func (m *MasterVariables) Reset()         { *m = MasterVariables{} }
func (m *MasterVariables) String() string { return proto.CompactTextString(m) }
func (*MasterVariables) ProtoMessage()    {}
func (*MasterVariables) Descriptor() ([]byte, []int) {
	return fileDescriptor_fec356ed5fe8331d, []int{7}
}
func (m *MasterVariables) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MasterVariables) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MasterVariables.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MasterVariables) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MasterVariables.Merge(m, src)
}
func (m *MasterVariables) XXX_Size() int {
	return m.Size()
}
func (m *MasterVariables) XXX_DiscardUnknown() {
	xxx_messageInfo_MasterVariables.DiscardUnknown(m)
}

var xxx_messageInfo_MasterVariables proto.InternalMessageInfo

func (m *MasterVariables) GetMasterNodeID() uint64 {
	if m != nil {
		return m.MasterNodeID
	}
	return 0
}

func (m *MasterVariables) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *MasterVariables) GetLeaseTime() uint32 {
	if m != nil {
		return m.LeaseTime
	}
	return 0
}

type PaxosNodeInfo struct {
	Rid    uint64 `protobuf:"varint,1,req,name=Rid,json=rid" json:"Rid"`
	NodeID uint64 `protobuf:"varint,2,req,name=NodeID,json=nodeID" json:"NodeID"`
}

func (m *PaxosNodeInfo) Reset()         { *m = PaxosNodeInfo{} }
func (m *PaxosNodeInfo) String() string { return proto.CompactTextString(m) }
func (*PaxosNodeInfo) ProtoMessage()    {}
func (*PaxosNodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_fec356ed5fe8331d, []int{8}
}
func (m *PaxosNodeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaxosNodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaxosNodeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaxosNodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaxosNodeInfo.Merge(m, src)
}
func (m *PaxosNodeInfo) XXX_Size() int {
	return m.Size()
}
func (m *PaxosNodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PaxosNodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PaxosNodeInfo proto.InternalMessageInfo

func (m *PaxosNodeInfo) GetRid() uint64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *PaxosNodeInfo) GetNodeID() uint64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

type SystemVariables struct {
	Gid        uint64           `protobuf:"varint,1,req,name=Gid,json=gid" json:"Gid"`
	MemberShip []*PaxosNodeInfo `protobuf:"bytes,2,rep,name=MemberShip,json=memberShip" json:"MemberShip,omitempty"`
	Version    uint64           `protobuf:"varint,3,req,name=Version,json=version" json:"Version"`
}

func (m *SystemVariables) Reset()         { *m = SystemVariables{} }
func (m *SystemVariables) String() string { return proto.CompactTextString(m) }
func (*SystemVariables) ProtoMessage()    {}
func (*SystemVariables) Descriptor() ([]byte, []int) {
	return fileDescriptor_fec356ed5fe8331d, []int{9}
}
func (m *SystemVariables) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemVariables) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemVariables.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemVariables) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemVariables.Merge(m, src)
}
func (m *SystemVariables) XXX_Size() int {
	return m.Size()
}
func (m *SystemVariables) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemVariables.DiscardUnknown(m)
}

var xxx_messageInfo_SystemVariables proto.InternalMessageInfo

func (m *SystemVariables) GetGid() uint64 {
	if m != nil {
		return m.Gid
	}
	return 0
}

func (m *SystemVariables) GetMemberShip() []*PaxosNodeInfo {
	if m != nil {
		return m.MemberShip
	}
	return nil
}

func (m *SystemVariables) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func init() {
	proto.RegisterEnum("paxospb.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("paxospb.EntryType", EntryType_name, EntryType_value)
	proto.RegisterType((*PaxosDataStatus)(nil), "paxospb.PaxosDataStatus")
	proto.RegisterType((*PaxosMsg)(nil), "paxospb.PaxosMsg")
	proto.RegisterType((*MessageBatch)(nil), "paxospb.MessageBatch")
	proto.RegisterType((*Entry)(nil), "paxospb.Entry")
	proto.RegisterType((*EntryBatch)(nil), "paxospb.EntryBatch")
	proto.RegisterType((*BallotNumber)(nil), "paxospb.BallotNumber")
	proto.RegisterType((*AcceptorState)(nil), "paxospb.AcceptorState")
	proto.RegisterType((*MasterVariables)(nil), "paxospb.MasterVariables")
	proto.RegisterType((*PaxosNodeInfo)(nil), "paxospb.PaxosNodeInfo")
	proto.RegisterType((*SystemVariables)(nil), "paxospb.SystemVariables")
}

func init() { proto.RegisterFile("paxos.proto", fileDescriptor_fec356ed5fe8331d) }

var fileDescriptor_fec356ed5fe8331d = []byte{
	// 927 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xcb, 0x6e, 0x23, 0x45,
	0x14, 0x75, 0x3f, 0x12, 0xc7, 0xd7, 0xcf, 0x54, 0x32, 0x51, 0x6b, 0x34, 0x78, 0x4c, 0x0b, 0x21,
	0x2b, 0x0c, 0x1e, 0x29, 0xa0, 0x11, 0x0b, 0x36, 0xb1, 0x33, 0x0c, 0x96, 0xc6, 0x91, 0xe5, 0x44,
	0xd9, 0x46, 0xe5, 0xee, 0x72, 0xbb, 0xa1, 0xbb, 0xab, 0xa9, 0x2a, 0x07, 0xbc, 0x42, 0x7c, 0x01,
	0x7c, 0xd6, 0x2c, 0xb3, 0x64, 0x85, 0x20, 0x59, 0xf1, 0x15, 0xa0, 0xaa, 0x7e, 0xa4, 0x1c, 0x33,
	0x62, 0x76, 0xe9, 0x73, 0xcf, 0x3d, 0xb7, 0xea, 0xd6, 0x39, 0x0e, 0xd4, 0x53, 0xfc, 0x13, 0xe5,
	0x83, 0x94, 0x51, 0x41, 0x51, 0x55, 0x7d, 0xa4, 0xf3, 0xa7, 0x9f, 0x07, 0xa1, 0x58, 0xae, 0xe6,
	0x03, 0x8f, 0xc6, 0x2f, 0x03, 0x1a, 0xd0, 0x97, 0xaa, 0x3e, 0x5f, 0x2d, 0xd4, 0x97, 0xfa, 0x50,
	0x7f, 0x65, 0x7d, 0x2e, 0x87, 0xf6, 0x54, 0x76, 0x9e, 0x61, 0x81, 0x2f, 0x04, 0x16, 0x2b, 0x8e,
	0xba, 0x50, 0xc5, 0xbe, 0xcf, 0x08, 0xe7, 0x8e, 0xd1, 0x33, 0xfa, 0xb5, 0xa1, 0xfd, 0xee, 0x8f,
	0xe7, 0x95, 0x59, 0x01, 0xa2, 0x8f, 0xa0, 0x3a, 0x0f, 0x93, 0xeb, 0x1b, 0xc2, 0x1c, 0xb3, 0x67,
	0xf4, 0x9b, 0x79, 0x7d, 0x77, 0x1e, 0x26, 0x57, 0x84, 0xa1, 0x8f, 0xa1, 0xb6, 0xc4, 0xcc, 0xbf,
	0x5e, 0x62, 0xbe, 0x74, 0xac, 0x9e, 0xd1, 0xb7, 0x73, 0xc2, 0x9e, 0x84, 0xbf, 0xc5, 0x7c, 0xe9,
	0xfe, 0x63, 0xc3, 0x9e, 0x9a, 0x3a, 0xe1, 0x01, 0xfa, 0x12, 0xaa, 0x13, 0x1e, 0x5c, 0xae, 0x53,
	0xa2, 0xc6, 0xb5, 0x4e, 0x0e, 0x07, 0xf9, 0x5d, 0x06, 0x13, 0xc2, 0x39, 0x0e, 0x88, 0xac, 0x15,
	0x87, 0x88, 0x33, 0x2a, 0x3a, 0x04, 0xf3, 0x92, 0xaa, 0xf9, 0x85, 0xbc, 0x29, 0x28, 0x72, 0xc0,
	0xfe, 0x86, 0xd1, 0x78, 0x63, 0xac, 0xbd, 0x60, 0x34, 0x46, 0xcf, 0x61, 0xef, 0x0d, 0xa3, 0xab,
	0xf4, 0x3a, 0xf4, 0x1d, 0x5b, 0xab, 0x56, 0x03, 0x89, 0x8e, 0x7d, 0xf4, 0x09, 0xc0, 0x38, 0xe1,
	0x02, 0x27, 0x1e, 0x19, 0x9f, 0x39, 0x3b, 0x1a, 0x05, 0xc2, 0x12, 0x47, 0xcf, 0x60, 0xf7, 0x9c,
	0xfa, 0x92, 0xb1, 0xab, 0x31, 0x76, 0x13, 0x85, 0x49, 0x8d, 0x29, 0xa3, 0x29, 0xe5, 0x38, 0x1a,
	0x9f, 0x39, 0x55, 0x5d, 0x23, 0x2d, 0x71, 0xf4, 0x02, 0x5a, 0x05, 0x2b, 0xd7, 0xda, 0xd3, 0x98,
	0xad, 0x74, 0xa3, 0x86, 0x9e, 0xc2, 0xce, 0x15, 0x8e, 0x56, 0xc4, 0xa9, 0xf5, 0x8c, 0x7e, 0x23,
	0x27, 0xed, 0xdc, 0x48, 0x08, 0x7d, 0x0a, 0xf5, 0x29, 0x23, 0xa7, 0x9e, 0x47, 0x52, 0x31, 0x3e,
	0x73, 0x40, 0x93, 0xa9, 0xa7, 0x0f, 0x05, 0x34, 0x80, 0x76, 0xc9, 0xcb, 0x47, 0xd6, 0x35, 0x6e,
	0x3b, 0xdd, 0x2c, 0xa2, 0x13, 0xd8, 0x9f, 0x91, 0xef, 0x88, 0x27, 0x86, 0xeb, 0x29, 0xa3, 0x71,
	0xc8, 0x65, 0x47, 0x43, 0xeb, 0xd8, 0x67, 0x8f, 0xcb, 0xe8, 0x18, 0x9a, 0xe7, 0xf4, 0x47, 0x6d,
	0x85, 0x4d, 0x8d, 0xdf, 0x4c, 0xf4, 0x12, 0x7a, 0x05, 0x07, 0x93, 0x30, 0x19, 0x2d, 0x29, 0x27,
	0x89, 0xd6, 0xd1, 0xd2, 0x3a, 0x0e, 0xe2, 0x6d, 0x82, 0x7a, 0xde, 0x08, 0x07, 0xce, 0xbe, 0x66,
	0x3b, 0x7b, 0x11, 0xe1, 0x40, 0xde, 0x70, 0x82, 0xb9, 0x20, 0xec, 0x0a, 0xb3, 0x10, 0xcf, 0x23,
	0xc2, 0x9d, 0x03, 0x6d, 0x5f, 0xed, 0x78, 0xb3, 0xe8, 0xfe, 0x6a, 0x40, 0x23, 0x77, 0xd7, 0x10,
	0x0b, 0x6f, 0x89, 0xbe, 0x80, 0x3d, 0x46, 0x7e, 0x58, 0x11, 0x2e, 0xa4, 0xeb, 0xad, 0x7e, 0xfd,
	0x64, 0xbf, 0xb4, 0x61, 0x61, 0xd5, 0xc2, 0xc7, 0x05, 0x11, 0x7d, 0x06, 0x2d, 0x4e, 0x57, 0xcc,
	0x23, 0xd7, 0x45, 0x60, 0x4c, 0x2d, 0x30, 0xcd, 0xac, 0x76, 0xba, 0x1d, 0x1b, 0x6b, 0x3b, 0x36,
	0x2e, 0x87, 0x9d, 0xd7, 0x89, 0x60, 0xeb, 0x47, 0x46, 0x34, 0xde, 0x63, 0xc4, 0x17, 0x60, 0xab,
	0xc8, 0x98, 0x2a, 0x32, 0xa8, 0x3c, 0xab, 0xd2, 0xd0, 0x02, 0x63, 0x0b, 0x99, 0x96, 0x23, 0xb0,
	0x46, 0xb1, 0xaf, 0xe6, 0x16, 0xa7, 0xb3, 0xbc, 0xd8, 0x77, 0xbf, 0x06, 0x50, 0x0d, 0xd9, 0x0e,
	0x06, 0x50, 0x25, 0x89, 0x60, 0x21, 0x29, 0x56, 0xd0, 0xda, 0x94, 0x2d, 0x22, 0x93, 0x93, 0xdc,
	0x19, 0x34, 0x86, 0x38, 0x8a, 0xa8, 0x38, 0x5f, 0xc5, 0x73, 0xc2, 0x1e, 0xd9, 0xdf, 0x78, 0x8f,
	0xfd, 0x1f, 0x22, 0x64, 0x6e, 0x47, 0xc8, 0xfd, 0xdb, 0x80, 0x66, 0xe6, 0x45, 0xca, 0xe4, 0xef,
	0x11, 0xf9, 0xc0, 0x7d, 0x9c, 0x42, 0x33, 0xf7, 0x62, 0x76, 0x24, 0x25, 0x5e, 0x3f, 0x79, 0x52,
	0xde, 0x40, 0x3f, 0x69, 0xf1, 0x40, 0xa9, 0xde, 0x81, 0x46, 0xd0, 0xca, 0x26, 0x13, 0x3f, 0xd7,
	0xb0, 0xfe, 0x5f, 0xa3, 0x85, 0x37, 0x5a, 0x64, 0x0c, 0xa4, 0x88, 0x48, 0x89, 0x9f, 0xc5, 0xd6,
	0xd6, 0x1d, 0x81, 0xf5, 0x92, 0xfb, 0xf3, 0x96, 0x69, 0x51, 0x1f, 0x1a, 0x19, 0x94, 0xaf, 0xc8,
	0xe8, 0x99, 0xe5, 0x75, 0x1b, 0xb1, 0x56, 0x91, 0xbf, 0xd2, 0x57, 0x84, 0xf1, 0x90, 0x26, 0x8e,
	0xa9, 0x91, 0xaa, 0x37, 0x19, 0x88, 0x5c, 0xa8, 0xbd, 0x25, 0x98, 0x93, 0xcb, 0x30, 0x26, 0x8e,
	0xd5, 0x33, 0x4b, 0xc3, 0xd5, 0xa2, 0x02, 0x76, 0x5f, 0x43, 0x53, 0x79, 0x5b, 0x49, 0x26, 0x0b,
	0x2a, 0x7d, 0x32, 0x0b, 0xfd, 0x8d, 0xa9, 0x16, 0x0b, 0xfd, 0x8d, 0x37, 0x33, 0xb7, 0xde, 0xec,
	0x17, 0x03, 0xda, 0x17, 0x6b, 0x2e, 0x48, 0xfc, 0x70, 0x91, 0x23, 0xb0, 0xde, 0x3c, 0x56, 0x0a,
	0x42, 0x1f, 0xbd, 0x02, 0x98, 0x10, 0xb9, 0xbf, 0x8b, 0x65, 0x98, 0x3a, 0xa6, 0xb2, 0xd9, 0xd1,
	0x66, 0xd2, 0x8a, 0xd3, 0xcc, 0x20, 0x2e, 0x99, 0xfa, 0x75, 0xad, 0xff, 0xb8, 0xee, 0x71, 0x04,
	0x75, 0xed, 0xbf, 0x05, 0x6a, 0x42, 0xed, 0x2d, 0xf5, 0x70, 0x74, 0x19, 0x7a, 0xdf, 0x77, 0x2a,
	0xa8, 0x03, 0x0d, 0x25, 0x3d, 0x65, 0x24, 0xc5, 0x8c, 0x74, 0x0c, 0xf4, 0x04, 0xf6, 0x75, 0x64,
	0x46, 0xd2, 0x68, 0xdd, 0x31, 0x51, 0x1b, 0xea, 0x0a, 0xce, 0x8c, 0xd0, 0xb1, 0xd0, 0x21, 0x74,
	0x34, 0x20, 0xa3, 0xd9, 0xc7, 0x5f, 0x41, 0xad, 0x0c, 0x9a, 0xa4, 0x9c, 0xa6, 0x69, 0x14, 0x7a,
	0x58, 0x84, 0x34, 0x51, 0x78, 0xa7, 0x22, 0x07, 0x8c, 0x68, 0xb2, 0x08, 0x83, 0xd1, 0x12, 0x27,
	0x01, 0xc9, 0x60, 0x63, 0xf8, 0xec, 0xf6, 0xaf, 0x6e, 0xe5, 0xdd, 0x5d, 0xd7, 0xb8, 0xbd, 0xeb,
	0x1a, 0x7f, 0xde, 0x75, 0x8d, 0xdf, 0xee, 0xbb, 0x95, 0xdb, 0xfb, 0x6e, 0xe5, 0xf7, 0xfb, 0x6e,
	0xe5, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x9a, 0x7b, 0x6d, 0xd3, 0x07, 0x00, 0x00,
}

func (m *PaxosDataStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaxosDataStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(len(m.Address)))
	i += copy(dAtA[i:], m.Address)
	dAtA[i] = 0x10
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.BinVer))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.HardHash))
	return i, nil
}

func (m *PaxosMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaxosMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.MsgType))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.To))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.From))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.GroupId))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.InstanceID))
	dAtA[i] = 0x30
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.NodeID))
	dAtA[i] = 0x38
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.ProposalID))
	dAtA[i] = 0x40
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.ProposalNodeID))
	if m.Value != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPaxos(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	dAtA[i] = 0x50
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.PreAcceptID))
	dAtA[i] = 0x58
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.PreAcceptNodeID))
	dAtA[i] = 0x60
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.RejectByPromiseID))
	dAtA[i] = 0x68
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.NowInstanceID))
	dAtA[i] = 0x70
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.MinChosenInstanceID))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.Flag))
	if m.MasterVariables != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPaxos(dAtA, i, uint64(len(m.MasterVariables)))
		i += copy(dAtA[i:], m.MasterVariables)
	}
	return i, nil
}

func (m *MessageBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageBatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, msg := range m.Requests {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPaxos(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(len(m.SourceAddress)))
	i += copy(dAtA[i:], m.SourceAddress)
	dAtA[i] = 0x18
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.BinVer))
	return i, nil
}

func (m *Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.InstanceID))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.Type))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(len(m.Cmd)))
	i += copy(dAtA[i:], m.Cmd)
	return i, nil
}

func (m *EntryBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntryBatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, msg := range m.Entries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPaxos(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BallotNumber) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BallotNumber) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.ProposalID))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.NodeID))
	return i, nil
}

func (m *AcceptorState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptorState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.InstanceID))
	dAtA[i] = 0x12
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.PromiseBallot.Size()))
	n1, err1 := m.PromiseBallot.MarshalTo(dAtA[i:])
	if err1 != nil {
		return 0, err1
	}
	i += n1
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.AcceptedBallot.Size()))
	n2, err2 := m.AcceptedBallot.MarshalTo(dAtA[i:])
	if err2 != nil {
		return 0, err2
	}
	i += n2
	dAtA[i] = 0x22
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(len(m.AccetpedValue)))
	i += copy(dAtA[i:], m.AccetpedValue)
	return i, nil
}

func (m *MasterVariables) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MasterVariables) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.MasterNodeID))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.Version))
	dAtA[i] = 0x18
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.LeaseTime))
	return i, nil
}

func (m *PaxosNodeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaxosNodeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.Rid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.NodeID))
	return i, nil
}

func (m *SystemVariables) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemVariables) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.Gid))
	if len(m.MemberShip) > 0 {
		for _, msg := range m.MemberShip {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPaxos(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintPaxos(dAtA, i, uint64(m.Version))
	return i, nil
}

func encodeVarintPaxos(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PaxosDataStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	n += 1 + l + sovPaxos(uint64(l))
	n += 1 + sovPaxos(uint64(m.BinVer))
	n += 1 + sovPaxos(uint64(m.HardHash))
	return n
}

func (m *PaxosMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovPaxos(uint64(m.MsgType))
	n += 1 + sovPaxos(uint64(m.To))
	n += 1 + sovPaxos(uint64(m.From))
	n += 1 + sovPaxos(uint64(m.GroupId))
	n += 1 + sovPaxos(uint64(m.InstanceID))
	n += 1 + sovPaxos(uint64(m.NodeID))
	n += 1 + sovPaxos(uint64(m.ProposalID))
	n += 1 + sovPaxos(uint64(m.ProposalNodeID))
	if m.Value != nil {
		l = len(m.Value)
		n += 1 + l + sovPaxos(uint64(l))
	}
	n += 1 + sovPaxos(uint64(m.PreAcceptID))
	n += 1 + sovPaxos(uint64(m.PreAcceptNodeID))
	n += 1 + sovPaxos(uint64(m.RejectByPromiseID))
	n += 1 + sovPaxos(uint64(m.NowInstanceID))
	n += 1 + sovPaxos(uint64(m.MinChosenInstanceID))
	n += 2 + sovPaxos(uint64(m.Flag))
	if m.MasterVariables != nil {
		l = len(m.MasterVariables)
		n += 2 + l + sovPaxos(uint64(l))
	}
	return n
}

func (m *MessageBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovPaxos(uint64(l))
		}
	}
	l = len(m.SourceAddress)
	n += 1 + l + sovPaxos(uint64(l))
	n += 1 + sovPaxos(uint64(m.BinVer))
	return n
}

func (m *Entry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovPaxos(uint64(m.InstanceID))
	n += 1 + sovPaxos(uint64(m.Type))
	l = len(m.Cmd)
	n += 1 + l + sovPaxos(uint64(l))
	return n
}

func (m *EntryBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovPaxos(uint64(l))
		}
	}
	return n
}

func (m *BallotNumber) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovPaxos(uint64(m.ProposalID))
	n += 1 + sovPaxos(uint64(m.NodeID))
	return n
}

func (m *AcceptorState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovPaxos(uint64(m.InstanceID))
	l = m.PromiseBallot.Size()
	n += 1 + l + sovPaxos(uint64(l))
	l = m.AcceptedBallot.Size()
	n += 1 + l + sovPaxos(uint64(l))
	l = len(m.AccetpedValue)
	n += 1 + l + sovPaxos(uint64(l))
	return n
}

func (m *MasterVariables) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovPaxos(uint64(m.MasterNodeID))
	n += 1 + sovPaxos(uint64(m.Version))
	n += 1 + sovPaxos(uint64(m.LeaseTime))
	return n
}

func (m *PaxosNodeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovPaxos(uint64(m.Rid))
	n += 1 + sovPaxos(uint64(m.NodeID))
	return n
}

func (m *SystemVariables) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovPaxos(uint64(m.Gid))
	if len(m.MemberShip) > 0 {
		for _, e := range m.MemberShip {
			l = e.Size()
			n += 1 + l + sovPaxos(uint64(l))
		}
	}
	n += 1 + sovPaxos(uint64(m.Version))
	return n
}

func sovPaxos(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPaxos(x uint64) (n int) {
	return sovPaxos(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PaxosDataStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaxosDataStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaxosDataStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaxos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaxos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinVer", wireType)
			}
			m.BinVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BinVer |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardHash", wireType)
			}
			m.HardHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HardHash |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPaxos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaxosMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaxosMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaxosMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= MessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceID", wireType)
			}
			m.InstanceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstanceID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalID", wireType)
			}
			m.ProposalID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalNodeID", wireType)
			}
			m.ProposalNodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalNodeID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaxos
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPaxos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreAcceptID", wireType)
			}
			m.PreAcceptID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreAcceptID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreAcceptNodeID", wireType)
			}
			m.PreAcceptNodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreAcceptNodeID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectByPromiseID", wireType)
			}
			m.RejectByPromiseID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RejectByPromiseID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NowInstanceID", wireType)
			}
			m.NowInstanceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NowInstanceID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinChosenInstanceID", wireType)
			}
			m.MinChosenInstanceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinChosenInstanceID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterVariables", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaxos
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPaxos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterVariables = append(m.MasterVariables[:0], dAtA[iNdEx:postIndex]...)
			if m.MasterVariables == nil {
				m.MasterVariables = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaxos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPaxos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPaxos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, PaxosMsg{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaxos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaxos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinVer", wireType)
			}
			m.BinVer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BinVer |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPaxos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceID", wireType)
			}
			m.InstanceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstanceID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= EntryType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaxos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaxos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cmd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaxos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntryBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntryBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntryBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPaxos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPaxos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, Entry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaxos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BallotNumber) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BallotNumber: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BallotNumber: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalID", wireType)
			}
			m.ProposalID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPaxos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptorState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptorState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptorState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceID", wireType)
			}
			m.InstanceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstanceID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromiseBallot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPaxos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPaxos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PromiseBallot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedBallot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPaxos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPaxos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AcceptedBallot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccetpedValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaxos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaxos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccetpedValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaxos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MasterVariables) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MasterVariables: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MasterVariables: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterNodeID", wireType)
			}
			m.MasterNodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MasterNodeID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseTime", wireType)
			}
			m.LeaseTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaseTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipPaxos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("MasterNodeID")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Version")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("LeaseTime")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaxosNodeInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaxosNodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaxosNodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipPaxos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Rid")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("NodeID")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemVariables) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemVariables: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemVariables: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			m.Gid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberShip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPaxos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPaxos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberShip = append(m.MemberShip, &PaxosNodeInfo{})
			if err := m.MemberShip[len(m.MemberShip)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipPaxos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPaxos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Gid")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("Version")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPaxos(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPaxos
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPaxos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPaxos
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPaxos
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPaxos
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPaxos(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPaxos
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPaxos = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPaxos   = fmt.Errorf("proto: integer overflow")
)
