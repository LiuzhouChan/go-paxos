// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: paxoskv.proto

package paxoskv

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type KVRequest_OperatorType int32

const (
	KVRequest_READ   KVRequest_OperatorType = 0
	KVRequest_DELETE KVRequest_OperatorType = 1
	KVRequest_WRITE  KVRequest_OperatorType = 2
)

var KVRequest_OperatorType_name = map[int32]string{
	0: "READ",
	1: "DELETE",
	2: "WRITE",
}

var KVRequest_OperatorType_value = map[string]int32{
	"READ":   0,
	"DELETE": 1,
	"WRITE":  2,
}

func (x KVRequest_OperatorType) Enum() *KVRequest_OperatorType {
	p := new(KVRequest_OperatorType)
	*p = x
	return p
}

func (x KVRequest_OperatorType) String() string {
	return proto.EnumName(KVRequest_OperatorType_name, int32(x))
}

func (x *KVRequest_OperatorType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(KVRequest_OperatorType_value, data, "KVRequest_OperatorType")
	if err != nil {
		return err
	}
	*x = KVRequest_OperatorType(value)
	return nil
}

func (KVRequest_OperatorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2fd9fc43023b527a, []int{0, 0}
}

type KVResponse_Code int32

const (
	KVResponse_OK               KVResponse_Code = 0
	KVResponse_KEY_NOT_EXIST    KVResponse_Code = 1
	KVResponse_VERSION_CONFLICT KVResponse_Code = 2
)

var KVResponse_Code_name = map[int32]string{
	0: "OK",
	1: "KEY_NOT_EXIST",
	2: "VERSION_CONFLICT",
}

var KVResponse_Code_value = map[string]int32{
	"OK":               0,
	"KEY_NOT_EXIST":    1,
	"VERSION_CONFLICT": 2,
}

func (x KVResponse_Code) Enum() *KVResponse_Code {
	p := new(KVResponse_Code)
	*p = x
	return p
}

func (x KVResponse_Code) String() string {
	return proto.EnumName(KVResponse_Code_name, int32(x))
}

func (x *KVResponse_Code) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(KVResponse_Code_value, data, "KVResponse_Code")
	if err != nil {
		return err
	}
	*x = KVResponse_Code(value)
	return nil
}

func (KVResponse_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2fd9fc43023b527a, []int{2, 0}
}

type KVRequest struct {
	Key      string                 `protobuf:"bytes,1,opt,name=key" json:"key"`
	Value    []byte                 `protobuf:"bytes,2,opt,name=value" json:"value"`
	Version  uint64                 `protobuf:"varint,3,opt,name=version" json:"version"`
	Operator KVRequest_OperatorType `protobuf:"varint,4,opt,name=operator,enum=paxoskv.KVRequest_OperatorType" json:"operator"`
	Sid      uint32                 `protobuf:"varint,5,opt,name=sid" json:"sid"`
}

func (m *KVRequest) Reset()         { *m = KVRequest{} }
func (m *KVRequest) String() string { return proto.CompactTextString(m) }
func (*KVRequest) ProtoMessage()    {}
func (*KVRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fd9fc43023b527a, []int{0}
}
func (m *KVRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KVRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KVRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KVRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KVRequest.Merge(m, src)
}
func (m *KVRequest) XXX_Size() int {
	return m.Size()
}
func (m *KVRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KVRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KVRequest proto.InternalMessageInfo

func (m *KVRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KVRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *KVRequest) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *KVRequest) GetOperator() KVRequest_OperatorType {
	if m != nil {
		return m.Operator
	}
	return KVRequest_READ
}

func (m *KVRequest) GetSid() uint32 {
	if m != nil {
		return m.Sid
	}
	return 0
}

type KVData struct {
	Value     []byte `protobuf:"bytes,1,opt,name=value" json:"value"`
	Version   uint64 `protobuf:"varint,2,opt,name=version" json:"version"`
	Isdeleted bool   `protobuf:"varint,3,opt,name=isdeleted" json:"isdeleted"`
}

func (m *KVData) Reset()         { *m = KVData{} }
func (m *KVData) String() string { return proto.CompactTextString(m) }
func (*KVData) ProtoMessage()    {}
func (*KVData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fd9fc43023b527a, []int{1}
}
func (m *KVData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KVData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KVData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KVData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KVData.Merge(m, src)
}
func (m *KVData) XXX_Size() int {
	return m.Size()
}
func (m *KVData) XXX_DiscardUnknown() {
	xxx_messageInfo_KVData.DiscardUnknown(m)
}

var xxx_messageInfo_KVData proto.InternalMessageInfo

func (m *KVData) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *KVData) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *KVData) GetIsdeleted() bool {
	if m != nil {
		return m.Isdeleted
	}
	return false
}

type KVResponse struct {
	Data KVData          `protobuf:"bytes,1,opt,name=data" json:"data"`
	Code KVResponse_Code `protobuf:"varint,2,opt,name=code,enum=paxoskv.KVResponse_Code" json:"code"`
}

func (m *KVResponse) Reset()         { *m = KVResponse{} }
func (m *KVResponse) String() string { return proto.CompactTextString(m) }
func (*KVResponse) ProtoMessage()    {}
func (*KVResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fd9fc43023b527a, []int{2}
}
func (m *KVResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KVResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KVResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KVResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KVResponse.Merge(m, src)
}
func (m *KVResponse) XXX_Size() int {
	return m.Size()
}
func (m *KVResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KVResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KVResponse proto.InternalMessageInfo

func (m *KVResponse) GetData() KVData {
	if m != nil {
		return m.Data
	}
	return KVData{}
}

func (m *KVResponse) GetCode() KVResponse_Code {
	if m != nil {
		return m.Code
	}
	return KVResponse_OK
}

func init() {
	proto.RegisterEnum("paxoskv.KVRequest_OperatorType", KVRequest_OperatorType_name, KVRequest_OperatorType_value)
	proto.RegisterEnum("paxoskv.KVResponse_Code", KVResponse_Code_name, KVResponse_Code_value)
	proto.RegisterType((*KVRequest)(nil), "paxoskv.KVRequest")
	proto.RegisterType((*KVData)(nil), "paxoskv.KVData")
	proto.RegisterType((*KVResponse)(nil), "paxoskv.KVResponse")
}

func init() { proto.RegisterFile("paxoskv.proto", fileDescriptor_2fd9fc43023b527a) }

var fileDescriptor_2fd9fc43023b527a = []byte{
	// 462 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x51, 0xc1, 0x6e, 0xd3, 0x40,
	0x14, 0xf4, 0xba, 0x4e, 0x9a, 0xbc, 0x36, 0xc5, 0x3c, 0x10, 0xb2, 0x72, 0x70, 0x2d, 0x9f, 0xcc,
	0x01, 0x07, 0x19, 0x21, 0xce, 0x6d, 0x62, 0x50, 0xe4, 0x28, 0xae, 0x1c, 0x2b, 0xc0, 0x29, 0x72,
	0xe3, 0x25, 0xb1, 0x1a, 0xba, 0xc6, 0x5e, 0x47, 0xed, 0x5f, 0xf0, 0x11, 0xdc, 0xf8, 0x91, 0x1e,
	0x7b, 0xe4, 0x84, 0x50, 0x72, 0xe4, 0x27, 0x90, 0x37, 0x4e, 0x5b, 0x44, 0x85, 0xd4, 0x9b, 0xdf,
	0xbc, 0x99, 0x7d, 0x33, 0x63, 0x68, 0xa5, 0xd1, 0x05, 0xcb, 0xcf, 0x96, 0x76, 0x9a, 0x31, 0xce,
	0x70, 0xb7, 0x1a, 0xdb, 0x2f, 0x66, 0x09, 0x9f, 0x17, 0xa7, 0xf6, 0x94, 0x7d, 0xee, 0xcc, 0xd8,
	0x8c, 0x75, 0xc4, 0xfe, 0xb4, 0xf8, 0x24, 0x26, 0x31, 0x88, 0xaf, 0x8d, 0xce, 0xfc, 0x4d, 0xa0,
	0xe9, 0x8d, 0x03, 0xfa, 0xa5, 0xa0, 0x39, 0xc7, 0x67, 0xb0, 0x73, 0x46, 0x2f, 0x35, 0x62, 0x10,
	0xab, 0x79, 0xac, 0x5c, 0xfd, 0x3c, 0x94, 0x82, 0x12, 0xc0, 0x36, 0xd4, 0x96, 0xd1, 0xa2, 0xa0,
	0x9a, 0x6c, 0x10, 0x6b, 0xbf, 0xda, 0x6c, 0x20, 0xd4, 0x61, 0x77, 0x49, 0xb3, 0x3c, 0x61, 0xe7,
	0xda, 0x8e, 0x41, 0x2c, 0xa5, 0xda, 0x6e, 0x41, 0x3c, 0x82, 0x06, 0x4b, 0x69, 0x16, 0x71, 0x96,
	0x69, 0x8a, 0x41, 0xac, 0x03, 0xe7, 0xd0, 0xde, 0x7a, 0xbf, 0xb9, 0x6c, 0xfb, 0x15, 0x25, 0xbc,
	0x4c, 0x69, 0xf5, 0xc2, 0x8d, 0xac, 0xb4, 0x95, 0x27, 0xb1, 0x56, 0x33, 0x88, 0xd5, 0xda, 0xda,
	0xca, 0x93, 0xd8, 0xec, 0xc0, 0xfe, 0x5d, 0x1d, 0x36, 0x40, 0x09, 0xdc, 0xa3, 0x9e, 0x2a, 0x21,
	0x40, 0xbd, 0xe7, 0x0e, 0xdc, 0xd0, 0x55, 0x09, 0x36, 0xa1, 0xf6, 0x3e, 0xe8, 0x87, 0xae, 0x2a,
	0x9b, 0x73, 0xa8, 0x7b, 0xe3, 0x5e, 0xc4, 0xa3, 0xdb, 0x44, 0xe4, 0xbf, 0x89, 0xe4, 0xfb, 0x12,
	0x99, 0xd0, 0x4c, 0xf2, 0x98, 0x2e, 0x28, 0xa7, 0xb1, 0xc8, 0xdc, 0xa8, 0x18, 0xb7, 0xb0, 0xf9,
	0x8d, 0x00, 0x94, 0xe9, 0xf2, 0x94, 0x9d, 0xe7, 0x14, 0x9f, 0x83, 0x12, 0x47, 0x3c, 0x12, 0xd7,
	0xf6, 0x9c, 0x47, 0x77, 0x0a, 0x28, 0xdd, 0x54, 0x72, 0x41, 0x41, 0x07, 0x94, 0x29, 0x8b, 0x37,
	0x55, 0x1f, 0x38, 0xda, 0x5f, 0x5d, 0x6d, 0x5e, 0xb3, 0xbb, 0x2c, 0xde, 0x96, 0x24, 0xb8, 0xe6,
	0x1b, 0x50, 0x4a, 0x0c, 0xeb, 0x20, 0xfb, 0x9e, 0x2a, 0xe1, 0x63, 0x68, 0x79, 0xee, 0xc7, 0xc9,
	0xd0, 0x0f, 0x27, 0xee, 0x87, 0xfe, 0x28, 0x54, 0x09, 0x3e, 0x05, 0x75, 0xec, 0x06, 0xa3, 0xbe,
	0x3f, 0x9c, 0x74, 0xfd, 0xe1, 0xdb, 0x41, 0xbf, 0x1b, 0xaa, 0xb2, 0xf3, 0x9d, 0xc0, 0xde, 0xc9,
	0xfc, 0xc2, 0x1b, 0x8f, 0x68, 0xb6, 0xa4, 0x19, 0xbe, 0x84, 0x9d, 0x93, 0x82, 0x23, 0xfe, 0xfb,
	0x87, 0xda, 0x4f, 0xee, 0x71, 0x62, 0x4a, 0xf8, 0x1a, 0x1a, 0xef, 0x28, 0x1f, 0xb0, 0x69, 0xb4,
	0x78, 0x88, 0xec, 0x15, 0xd4, 0x7b, 0xa2, 0xaa, 0x07, 0x88, 0x8e, 0xb5, 0xab, 0x95, 0x4e, 0xae,
	0x57, 0x3a, 0xf9, 0xb5, 0xd2, 0xc9, 0xd7, 0xb5, 0x2e, 0x5d, 0xaf, 0x75, 0xe9, 0xc7, 0x5a, 0x97,
	0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xa3, 0xbb, 0x50, 0x02, 0x0e, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PhxKVServerClient is the client API for PhxKVServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PhxKVServerClient interface {
	Put(ctx context.Context, in *KVRequest, opts ...grpc.CallOption) (*KVResponse, error)
	GetLocal(ctx context.Context, in *KVRequest, opts ...grpc.CallOption) (*KVResponse, error)
	Delete(ctx context.Context, in *KVRequest, opts ...grpc.CallOption) (*KVResponse, error)
}

type phxKVServerClient struct {
	cc *grpc.ClientConn
}

func NewPhxKVServerClient(cc *grpc.ClientConn) PhxKVServerClient {
	return &phxKVServerClient{cc}
}

func (c *phxKVServerClient) Put(ctx context.Context, in *KVRequest, opts ...grpc.CallOption) (*KVResponse, error) {
	out := new(KVResponse)
	err := c.cc.Invoke(ctx, "/paxoskv.PhxKVServer/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phxKVServerClient) GetLocal(ctx context.Context, in *KVRequest, opts ...grpc.CallOption) (*KVResponse, error) {
	out := new(KVResponse)
	err := c.cc.Invoke(ctx, "/paxoskv.PhxKVServer/GetLocal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *phxKVServerClient) Delete(ctx context.Context, in *KVRequest, opts ...grpc.CallOption) (*KVResponse, error) {
	out := new(KVResponse)
	err := c.cc.Invoke(ctx, "/paxoskv.PhxKVServer/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhxKVServerServer is the server API for PhxKVServer service.
type PhxKVServerServer interface {
	Put(context.Context, *KVRequest) (*KVResponse, error)
	GetLocal(context.Context, *KVRequest) (*KVResponse, error)
	Delete(context.Context, *KVRequest) (*KVResponse, error)
}

// UnimplementedPhxKVServerServer can be embedded to have forward compatible implementations.
type UnimplementedPhxKVServerServer struct {
}

func (*UnimplementedPhxKVServerServer) Put(ctx context.Context, req *KVRequest) (*KVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (*UnimplementedPhxKVServerServer) GetLocal(ctx context.Context, req *KVRequest) (*KVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocal not implemented")
}
func (*UnimplementedPhxKVServerServer) Delete(ctx context.Context, req *KVRequest) (*KVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterPhxKVServerServer(s *grpc.Server, srv PhxKVServerServer) {
	s.RegisterService(&_PhxKVServer_serviceDesc, srv)
}

func _PhxKVServer_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhxKVServerServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paxoskv.PhxKVServer/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhxKVServerServer).Put(ctx, req.(*KVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhxKVServer_GetLocal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhxKVServerServer).GetLocal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paxoskv.PhxKVServer/GetLocal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhxKVServerServer).GetLocal(ctx, req.(*KVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhxKVServer_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhxKVServerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paxoskv.PhxKVServer/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhxKVServerServer).Delete(ctx, req.(*KVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PhxKVServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "paxoskv.PhxKVServer",
	HandlerType: (*PhxKVServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _PhxKVServer_Put_Handler,
		},
		{
			MethodName: "GetLocal",
			Handler:    _PhxKVServer_GetLocal_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PhxKVServer_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "paxoskv.proto",
}

func (m *KVRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KVRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPaxoskv(dAtA, i, uint64(len(m.Key)))
	i += copy(dAtA[i:], m.Key)
	if m.Value != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPaxoskv(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintPaxoskv(dAtA, i, uint64(m.Version))
	dAtA[i] = 0x20
	i++
	i = encodeVarintPaxoskv(dAtA, i, uint64(m.Operator))
	dAtA[i] = 0x28
	i++
	i = encodeVarintPaxoskv(dAtA, i, uint64(m.Sid))
	return i, nil
}

func (m *KVData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KVData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPaxoskv(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintPaxoskv(dAtA, i, uint64(m.Version))
	dAtA[i] = 0x18
	i++
	if m.Isdeleted {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *KVResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KVResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPaxoskv(dAtA, i, uint64(m.Data.Size()))
	n1, err1 := m.Data.MarshalTo(dAtA[i:])
	if err1 != nil {
		return 0, err1
	}
	i += n1
	dAtA[i] = 0x10
	i++
	i = encodeVarintPaxoskv(dAtA, i, uint64(m.Code))
	return i, nil
}

func encodeVarintPaxoskv(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *KVRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	n += 1 + l + sovPaxoskv(uint64(l))
	if m.Value != nil {
		l = len(m.Value)
		n += 1 + l + sovPaxoskv(uint64(l))
	}
	n += 1 + sovPaxoskv(uint64(m.Version))
	n += 1 + sovPaxoskv(uint64(m.Operator))
	n += 1 + sovPaxoskv(uint64(m.Sid))
	return n
}

func (m *KVData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = len(m.Value)
		n += 1 + l + sovPaxoskv(uint64(l))
	}
	n += 1 + sovPaxoskv(uint64(m.Version))
	n += 2
	return n
}

func (m *KVResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Data.Size()
	n += 1 + l + sovPaxoskv(uint64(l))
	n += 1 + sovPaxoskv(uint64(m.Code))
	return n
}

func sovPaxoskv(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPaxoskv(x uint64) (n int) {
	return sovPaxoskv(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KVRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxoskv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KVRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KVRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxoskv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaxoskv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaxoskv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxoskv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaxoskv
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPaxoskv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxoskv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			m.Operator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxoskv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operator |= KVRequest_OperatorType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxoskv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPaxoskv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxoskv
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPaxoskv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KVData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxoskv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KVData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KVData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxoskv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaxoskv
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPaxoskv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxoskv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isdeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxoskv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Isdeleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPaxoskv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxoskv
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPaxoskv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KVResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaxoskv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KVResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KVResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxoskv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPaxoskv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPaxoskv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaxoskv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= KVResponse_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPaxoskv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPaxoskv
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPaxoskv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPaxoskv(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPaxoskv
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPaxoskv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPaxoskv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPaxoskv
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPaxoskv
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPaxoskv
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPaxoskv(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPaxoskv
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPaxoskv = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPaxoskv   = fmt.Errorf("proto: integer overflow")
)
